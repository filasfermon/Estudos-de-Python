# Classe Livro representa uma obra com t√≠tulo, autor, ano e n√∫mero de c√≥pias dispon√≠veis
class Livro:
    def __init__(self, titulo, autor, ano, copias):
        self.titulo = titulo      # T√≠tulo do livro
        self.autor = autor        # Autor do livro
        self.ano = ano            # Ano de publica√ß√£o
        self.copias = copias      # Quantidade de c√≥pias dispon√≠veis

    def __str__(self):
        # Representa√ß√£o textual do objeto Livro, √∫til para exibi√ß√£o em tela
        return f"{self.titulo} ({self.ano}) - {self.autor} - C√≥pias: {self.copias}"


# Classe Usuario representa um usu√°rio da biblioteca com identifica√ß√£o e livros emprestados
class Usuario:
    def __init__(self, nome, id_usuario, contato):
        self.nome = nome                      # Nome do usu√°rio
        self.id_usuario = id_usuario          # Identificador √∫nico do usu√°rio
        self.contato = contato                # Informa√ß√µes de contato
        self.livros_emprestados = []          # Lista de t√≠tulos de livros emprestados

    def __str__(self):
        # Representa√ß√£o textual do objeto Usuario
        return f"{self.nome} (ID: {self.id_usuario})"


# Classe Biblioteca gerencia os livros e usu√°rios, al√©m das opera√ß√µes principais
class Biblioteca:
    def __init__(self):
        self.livros = []       # Lista de objetos do tipo Livro cadastrados
        self.usuarios = []     # Lista de objetos do tipo Usuario cadastrados

    def cadastrar_livro(self, livro):
        # Adiciona um novo livro √† lista de livros da biblioteca
        self.livros.append(livro)

    def cadastrar_usuario(self, usuario):
        # Adiciona um novo usu√°rio √† lista de usu√°rios da biblioteca
        self.usuarios.append(usuario)

    def encontrar_livro(self, titulo):
        # Procura um livro pelo t√≠tulo (ignorando mai√∫sculas/min√∫sculas)
        for livro in self.livros:
            if livro.titulo.lower() == titulo.lower():
                return livro
        return None  # Retorna None se o livro n√£o for encontrado

    def emprestar_livro(self, id_usuario, titulo):
        # Realiza o empr√©stimo de um livro para um usu√°rio espec√≠fico
        usuario = next((u for u in self.usuarios if u.id_usuario == id_usuario), None)
        livro = self.encontrar_livro(titulo)
        if usuario and livro:
            if livro.copias > 0:
                livro.copias -= 1                         # Diminui a quantidade de c√≥pias
                usuario.livros_emprestados.append(livro.titulo)  # Registra o empr√©stimo
                print(f"{livro.titulo} emprestado com sucesso para {usuario.nome}.")
            else:
                print("Livro indispon√≠vel para empr√©stimo.")
        else:
            print("Usu√°rio ou livro n√£o encontrado.")

    def devolver_livro(self, id_usuario, titulo):
        # Realiza a devolu√ß√£o de um livro por parte de um usu√°rio
        usuario = next((u for u in self.usuarios if u.id_usuario == id_usuario), None)
        livro = self.encontrar_livro(titulo)
        if usuario and livro and titulo in usuario.livros_emprestados:
            livro.copias += 1                            # Aumenta a quantidade de c√≥pias dispon√≠veis
            usuario.livros_emprestados.remove(titulo)    # Remove o t√≠tulo da lista de empr√©stimos
            print(f"{titulo} devolvido com sucesso.")
        else:
            print("Erro na devolu√ß√£o. Verifique os dados.")

    def consultar_livros(self, filtro=None):
        # Exibe os livros cadastrados, podendo filtrar por t√≠tulo ou autor
        for livro in self.livros:
            if not filtro or filtro.lower() in livro.titulo.lower() or filtro.lower() in livro.autor.lower():
                print(livro)

    def relatorios(self):
        # Exibe todos os livros e usu√°rios cadastrados no sistema
        print("\nüìö Livros Dispon√≠veis:")
        for livro in self.livros:
            print(livro)
        print("\nüë§ Usu√°rios Cadastrados:")
        for usuario in self.usuarios:
            print(usuario)


# Fun√ß√£o de menu principal do programa
def menu():
    biblio = Biblioteca()  # Instancia a biblioteca

    while True:
        # Menu interativo apresentado ao usu√°rio
        print("\n--- MENU ---")
        print("1. Cadastrar Livro")
        print("2. Cadastrar Usu√°rio")
        print("3. Empr√©stimo de Livro")
        print("4. Devolu√ß√£o de Livro")
        print("5. Consultar Livros")
        print("6. Relat√≥rios")
        print("7. Sair")

        opcao = input("Escolha uma op√ß√£o: ")

        # Tratamento das op√ß√µes do menu
        if opcao == '1':
            t = input("T√≠tulo: ")
            a = input("Autor: ")
            an = input("Ano: ")
            c = int(input("C√≥pias: "))
            biblio.cadastrar_livro(Livro(t, a, an, c))

        elif opcao == '2':
            n = input("Nome: ")
            i = input("ID: ")
            ct = input("Contato: ")
            biblio.cadastrar_usuario(Usuario(n, i, ct))

        elif opcao == '3':
            uid = input("ID do usu√°rio: ")
            titulo = input("T√≠tulo do livro: ")
            biblio.emprestar_livro(uid, titulo)

        elif opcao == '4':
            uid = input("ID do usu√°rio: ")
            titulo = input("T√≠tulo do livro: ")
            biblio.devolver_livro(uid, titulo)

        elif opcao == '5':
            f = input("Filtro (t√≠tulo/autor): ")
            biblio.consultar_livros(f)

        elif opcao == '6':
            biblio.relatorios()

        elif opcao == '7':
            print("Saindo...")
            break
        else:
            print("Op√ß√£o inv√°lida!")


# Execu√ß√£o do programa
menu()
